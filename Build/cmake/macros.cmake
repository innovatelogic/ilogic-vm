include(SelectLibraryConfigurations)include(ExternalProject)include(CMakeParseArguments)function( proj_thirdparty_add NAME )	cmake_parse_arguments( ARGS "" "SOURCE_DIR" "CMAKE_ARGS;DEPENDS" ${ARGN} )	string(TOUPPER ${NAME} NAMEU)	if( ENABLE_${NAMEU} )		ExternalProject_Add( ${NAME}			SOURCE_DIR ${CMAKE_SOURCE_DIR}			DOWNLOAD_COMMAND ""			CMAKE_ARGS				-DCMAKE_INSTALL_PREFIX:PATH=${G_INSTALL_DIR}				#-DCMAKE_MODULE_PATH:PATH=${CMAKE_MODULE_PATH}				-DWG_CMAKE_TARGET=${NAME}				-DWG_CMAKE_TARGET_DIR=${ARGS_SOURCE_DIR}				-DWG_BIN_DIR:PATH=${G_BIN_DIR}				#-DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}				${ARGS_CMAKE_ARGS}			DEPENDS ${ARGS_DEPENDS}					 	#BUILD_COMMAND 	${CMAKE_COMMAND} --build . --config Debug #${CMAKE_BUILD_TYPE}		 	#	COMMAND 	${CMAKE_COMMAND} --build . --config Release			#INSTALL_COMMAND	${CMAKE_COMMAND} --build . --target INSTALL --config Debug			#	COMMAND 	${CMAKE_COMMAND} --build . --target INSTALL --config Release			)		ExternalProject_Add_Step( ${NAME} forceconfigure			COMMAND ${CMAKE_COMMAND} -E echo "Force configure of ${NAME}"			DEPENDEES update			DEPENDERS configure			ALWAYS 1			)	endif()endfunction()# set to a Solution Folder#macro( set_project_group _PROJNAME _CATEGORY)#	set_target_properties( ${_PROJNAME} PROPERTIES FOLDER ${_CATEGORY} )#endmacro( set_project_group )